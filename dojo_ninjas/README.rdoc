1. Start the new project
rails g new dojo_ninjas

2. create appropriate tables/models
rails g model Code (name:string, city:string, state:string)
rails g model Ninja (first_name:string, last_name:string)

3. create 3 code schools
Code.create(name: "CodingDojo Seattle", city: "Seattle", state: "WA") -----> Create 3 more schools

4/5. change models for the required validations.
  class Dojo < ActiveRecord::Base
    has_many :ninjas
    validates :name, :city, :state, presence: true
    validates :state, length: { is: 2 }
  end

  class Ninja < ActiveRecord::Base
    belongs_to :dojo
    validates :first_name, :last_name, presence: true
  end

6. Delete the Code Schools created
  Dojo.destroy_all --> BE Careful with this one
  Dojo.find(1).delete ---> DO this for all 3

7. Create 3 additional schools with Code.new
  Code1 = Code.new(name:"CodingDojo Silicon Valley", city:"San Jose", state:"CA")
  code1.save
  Code2 = Code.new(name:"CodingDojo LA", city:"Los Angeles", state:"CA")
  code2.save
  Code3 = Code.new(name:"CodingDojo New York", city:"New York", state:"NY")
  code3.save

8. check to see if validations work
  code = Code.new
  code.save
  code.errors.full_messages

9. create 3 ninjas that belong to the first,second,third code school
Code.first.ninja.create(first_name: "Garrett", last_name:"Katashima")
Code.second.ninja.create(first_name: "Steph", last_name:"Curry")
Code.third.ninja.create(first_name: "Lebron", last_name:"James")

10. Make sure you receive all ninjas from any schools
Code.first.ninjas
Code.second.ninjas
Code.third.ninjas

11. How would you retrieve the first_name of the ninjas that belong to the second school and order result by created_at: DESC order?
Ninja.where(code: Code.second).select(:id,:first_name).order(created_at: :desc)

12. delete the second code school. How could you adjust the model so that it automatically removes all of the ninjas associated with that dojo?
class Dojo < ActiveRecord::Base
  has_many :ninjas, dependent :destroy
  validates :name, :city, :state, presence: true
  validates :state, length: { is: 2 }
end
